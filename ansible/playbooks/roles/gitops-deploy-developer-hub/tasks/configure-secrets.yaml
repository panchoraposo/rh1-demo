- name: Obtener valor de OAUTH_CLIENT_SECRET desde Secret existente
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: keycloak-client-secret
    namespace: backstage
  register: oauth_secret_info
  until: oauth_secret_info.resources is defined and oauth_secret_info.resources | length > 0
  retries: 10
  delay: 5

- name: Decodificar valor base64 de OAUTH_CLIENT_SECRET
  set_fact:
    oauth_client_secret_decoded: "{{ oauth_secret_info.resources[0].data.clientSecret | b64decode }}"

- name: Obtener contraseña de admin Argo CD
  command: >
    oc -n openshift-gitops get secret openshift-gitops-cluster -o jsonpath="{.data.admin\.password}"
  register: argocd_password_raw
  changed_when: false

- name: Decodificar contraseña de Argo CD
  set_fact:
    argocd_password: "{{ argocd_password_raw.stdout | b64decode }}"

- name: Crear ServiceAccount para integración con Topology
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: topology-integration
        namespace: backstage
    
- name: Crear ClusterRoleBinding para acceso de Topology
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: topology-integration-binding
      subjects:
        - kind: ServiceAccount
          name: topology-integration
          namespace: backstage
      roleRef:
        kind: ClusterRole
        name: view
        apiGroup: rbac.authorization.k8s.io

- name: Crear Secret de tipo service-account-token vinculado a la SA
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: topology-sa-token
        namespace: backstage
        annotations:
          kubernetes.io/service-account.name: topology-integration
      type: kubernetes.io/service-account-token

- name: Esperar hasta que el Secret tenga el campo `.data.token`
  command: >
    oc -n backstage get secret topology-sa-token -o jsonpath="{.data.token}"
  register: topology_token_raw
  until: topology_token_raw.stdout != ""
  retries: 10
  delay: 5
  changed_when: false

- name: Decodificar token de la SA
  set_fact:
    kubernetes_sa_token: "{{ topology_token_raw.stdout | b64decode }}"

- name: Crear o actualizar Secret backstage-env con valores combinados
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: backstage-env
        namespace: backstage
      type: Opaque
      stringData:
        GITLAB_TOKEN: "{{ generated_pat_result.json.token }}"
        NODE_TLS_REJECT_UNAUTHORIZED: "0"
        OPENSHIFT_CLUSTER_INGRESS_DOMAIN: "{{ openshift_base_domain }}"
        OAUTH_CLIENT_SECRET: "{{ oauth_client_secret_decoded }}"
        ARGOCD_PASSWORD: "{{ argocd_password }}"
        KUBERNETES_SA_TOKEN: "{{ kubernetes_sa_token }}"