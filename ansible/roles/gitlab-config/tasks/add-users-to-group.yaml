---
- name: Obtener ID del grupo '{{ current_group_data.name }}'
  ansible.builtin.uri:
    url: "https://{{ gitlab_host }}/api/v4/groups?search={{ current_group_data.name }}"
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ generated_pat_result.json.token }}"
    return_content: true
    status_code: [200, 503] # Permitir 503 para reintentos
    validate_certs: false
  register: group_query_result
  until: group_query_result.status == 200 and group_query_result.json | length > 0 # Esperar 200 y que el grupo sea encontrado
  retries: 10
  delay: 10

- name: Validar que el grupo fue encontrado
  ansible.builtin.fail:
    msg: "Grupo '{{ current_group_data.name }}' no encontrado."
  when: group_query_result.json | length == 0

- name: Establecer ID del grupo '{{ current_group_data.name }}'
  ansible.builtin.set_fact:
    current_group_id: "{{ group_query_result.json[0].id }}"

- name: Asegurar que el grupo '{{ current_group_data.name }}' tenga la visibilidad deseada
  ansible.builtin.uri:
    url: "https://{{ gitlab_host }}/api/v4/groups/{{ current_group_id }}"
    method: PUT
    headers:
      PRIVATE-TOKEN: "{{ generated_pat_result.json.token }}"
    body_format: json
    body:
      visibility: "{{ current_group_data.visibility | default('private') }}" # Usa la visibilidad de vars
    status_code: [200, 503]
    validate_certs: "{{ validate_ssl_certs }}"
  register: update_group_visibility_result
  until: update_group_visibility_result.status == 200
  retries: 10
  delay: 15
  changed_when: >
    update_group_visibility_result.status == 200 and
    update_group_visibility_result.json.visibility != current_group_data.visibility | default('private')
  when: current_group_data.visibility is defined or true # Se ejecutará si visibility está definida

- name: Obtener IDs de usuarios para '{{ current_group_data.name }}'
  ansible.builtin.uri:
    url: "https://{{ gitlab_host }}/api/v4/users?username={{ user_to_find.username }}"
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ generated_pat_result.json.token }}"
    return_content: true
    status_code: [200, 503] # Permitir 503 para reintentos
    validate_certs: false
  register: user_lookup_results
  loop: "{{ current_group_data.users }}"
  loop_control:
    loop_var: user_to_find
  until: user_lookup_results.status == 200 and user_lookup_results.json | length > 0 # Esperar 200 y que el usuario sea encontrado
  retries: 20 # Aumentar los reintentos para dar más tiempo a la indexación de GitLab
  delay: 10 # Mantener el retardo o ajustarlo si es necesario

- name: Agregar usuarios al grupo '{{ current_group_data.name }}'
  ansible.builtin.uri:
    url: "https://{{ gitlab_host }}/api/v4/groups/{{ current_group_id }}/members" # Usar la variable set_fact
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ generated_pat_result.json.token }}"
    body_format: json
    body:
      user_id: "{{ user_data.json[0].id }}"
      access_level: "{{ 40 if current_group_data.name == 'platform-engineers' else 30 }}"
    status_code: [201, 409, 503] # 201 Creado, 409 Conflicto, 503 para reintentos
    validate_certs: "{{ validate_ssl_certs }}"
  register: add_user_result
  changed_when: add_user_result.status == 201
  until: add_user_result.status in [201, 409] # Reintentar hasta 201 o 409
  retries: 10
  delay: 15
  loop: "{{ user_lookup_results.results }}"
  loop_control:
    loop_var: user_data
  when: user_data.json | length > 0 # Solo intentar agregar si el usuario fue encontrado en la búsqueda
